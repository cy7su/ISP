from __future__ import annotations

import asyncio
import os
import re
from datetime import datetime, timedelta
from typing import Any

import httpx
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from html2image import Html2Image
import io
from PIL import Image

TABLE_URL = "https://ppk.sstu.ru/doc/rasp/–ì–æ—Ä—å–∫–æ–≥–æ,%209/stud.xls"
RESULT_FILE = "–ò–°–ü-11.xls"
TEMP_FILE = "temp.xls"
HTML_FILE = "–ò–°–ü-11.html"
DAY_HTML_FILE = "day_–ò–°–ü-11.html"

bot = Bot(token='----------------------------')
dp = Dispatcher()

def get_main_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today"))
    builder.add(InlineKeyboardButton(text="üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="week"))
    builder.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="update"))
    builder.add(InlineKeyboardButton(text="üìÑ HTML —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="html"))
    builder.adjust(2)
    return builder.as_markup()

def get_back_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return builder.as_markup()

async def find_last_bot_message(chat_id: int) -> types.Message | None:
    """–ò—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        messages = await bot.get_chat_history(chat_id, limit=10)
        for message in messages:
            if message.from_user.id == bot.id:
                return message
    except Exception:
        pass
    return None

async def send_or_edit_message(chat_id: int, text: str, reply_markup=None) -> types.Message:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ"""
    last_message = await find_last_bot_message(chat_id)
    
    if last_message:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await last_message.edit_text(text, reply_markup=reply_markup)
        return last_message
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return await bot.send_message(chat_id, text, reply_markup=reply_markup)

@dp.message(Command("start"))
async def start(message: types.Message) -> None:
    sent_message = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ò–°–ü-11.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )
    
    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await sent_message.pin()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    if callback.data == "today":
        await get_today_schedule(callback.message)
    elif callback.data == "week":
        await get_week_schedule(callback.message)
    elif callback.data == "update":
        await download_schedule(callback.message)
    elif callback.data == "html":
        await send_html_file(callback.message)
    elif callback.data == "back":
        await show_main_menu(callback.message)
    
    await callback.answer()

async def show_main_menu(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await send_or_edit_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ò–°–ü-11.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        get_main_keyboard()
    )

async def download_schedule(message: types.Message) -> None:
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        status_message = await send_or_edit_message(message.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...", get_back_keyboard())
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(TABLE_URL)
            response.raise_for_status()

        with open(TEMP_FILE, 'wb') as f:
            f.write(response.content)
        
        df = pd.read_excel(TEMP_FILE, engine='xlrd')
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ò–°–ü-11
        target_row = None
        for row in range(df.shape[0]):
            cell_value = str(df.iloc[row, 0])
            if "–ì—Ä—É–ø–ø–∞ - –ò–°–ü-11" in cell_value:
                target_row = row
                break

        if target_row is None:
            await status_message.edit_text("‚ùå –ì—Ä—É–ø–ø–∞ –ò–°–ü-11 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.", reply_markup=get_back_keyboard())
            return

        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –ò–°–ü-11 (–¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø—ã)
        end_row = None
        for row in range(target_row + 1, df.shape[0]):
            cell_value = str(df.iloc[row, 0])
            if "–ì—Ä—É–ø–ø–∞ -" in cell_value and "–ò–°–ü-11" not in cell_value:
                end_row = row
                break
        
        if end_row is None:
            end_row = df.shape[0]
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ò–°–ü-11
        extracted_data = df.iloc[target_row + 1:end_row, :]
        
        # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
        extracted_data = extracted_data.fillna(' ')
        
        extracted_data.to_excel(RESULT_FILE, index=False, header=False, engine='openpyxl')

        # –°—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML (–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
        await convert_to_html_and_save(extracted_data)
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –¥–Ω—è
        await create_day_html(extracted_data)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await bot.send_message(
            message.chat.id,
            "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ HTML!",
            reply_markup=get_main_keyboard()
        )

    except httpx.HTTPError as e:
        await send_or_edit_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", get_back_keyboard())
    except Exception as e:
        await send_or_edit_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", get_back_keyboard())
    finally:
        if os.path.exists(TEMP_FILE):
            os.remove(TEMP_FILE)

async def convert_to_html_and_save(df: pd.DataFrame) -> None:
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º —Å—É–±–±–æ—Ç—É
    filtered_data = []
    for row_idx in range(df.shape[0]):
        row_data = df.iloc[row_idx, :]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ (–∏—Å–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–µ 2 –∫–æ–ª–æ–Ω–∫–∏ - –Ω–æ–º–µ—Ä –∏ –≤—Ä–µ–º—è)
        has_data = any(str(cell).strip() not in ['nan', ' ', ''] for cell in row_data[2:7])  # –ü–Ω-–ü—Ç (–∫–æ–ª–æ–Ω–∫–∏ 2-7)
        if has_data:
            filtered_data.append(row_data)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    filtered_df = pd.DataFrame(filtered_data)
    
    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    if filtered_df.shape[0] > 1:
        # –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É (–∏–Ω–¥–µ–∫—Å 1)
        filtered_df = filtered_df.drop(filtered_df.index[1])
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —Å –ø–æ–ª–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –ü–Ω-–ü—Ç)
    html_content = filtered_df.iloc[:, :7].to_html(index=False, header=False, classes='table table-striped')
    
    full_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ò–°–ü-11</title>
        <style>
            body {{ 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #0d1117;
                color: #c9d1d9;
                line-height: 1.6;
                min-height: 100vh;
            }}
            .container {{
                width: 1380px;
                margin: 0 auto;
                background-color: #161b22;
                border: 1px solid #30363d;
                border-radius: 6px;
                box-shadow: 0 8px 24px rgba(1, 4, 9, 0.12);
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }}
            .table {{ 
                border-collapse: collapse; 
                width: 100%; 
                background-color: #161b22;
                font-size: 16px;
            }}
            .table td, .table th {{ 
                border: 1px solid #30363d; 
                padding: 20px 16px; 
                text-align: left; 
                vertical-align: top;
            }}
            .table th {{ 
                background-color: #21262d;
                color: #f0f6fc;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                font-size: 12px;
            }}
            .table tr:nth-child(even) {{ 
                background-color: #1c2128; 
            }}
            .table tr:nth-child(odd) {{
                background-color: #161b22;
            }}
            .table tr:hover {{
                background-color: #21262d;
                transition: background-color 0.2s ease;
            }}
            .table tr:first-child {{
                background-color: #1f6feb !important;
                color: #f0f6fc;
                font-weight: 600;
                font-size: 14px;
            }}
            .table tr:nth-child(2) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(3) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(4) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(5) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(6) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(7) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(8) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(9) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(10) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(11) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(12) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(13) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(14) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(15) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(16) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(17) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(18) {{
                background-color: #161b22;
            }}
            .table tr:nth-child(19) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(20) {{
                background-color: #161b22;
            }}
            .update-time {{
                text-align: center;
                color: #8b949e;
                font-style: italic;
                background-color: #21262d;
                border-top: 1px solid #30363d;
                font-size: 14px;
            }}
            .time-column {{
                background-color: #21262d !important;
                color: #58a6ff;
                font-weight: 600;
                font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            }}
            .empty-cell {{
                color: #484f58;
                font-style: italic;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            {html_content}
            <div class="update-time">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    with open(HTML_FILE, 'w', encoding='utf-8') as f:
        f.write(full_html)

async def create_day_html(df: pd.DataFrame) -> None:
    """–°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π HTML —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    # –£–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    target_date, reason = get_smart_date_for_schedule()
    weekday_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    
    # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
    day_col = None
    for col in range(2, df.shape[1]):
        cell_value = str(df.iloc[0, col])
        if weekday_names[target_date.weekday()] in cell_value and target_date.strftime('%d.%m.%Y') in cell_value:
            day_col = col
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
    if day_col is None:
        for col in range(2, df.shape[1]):
            cell_value = str(df.iloc[0, col])
            if weekday_names[target_date.weekday()] in cell_value:
                date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', cell_value)
                if date_match:
                    found_date = datetime.strptime(date_match.group(1), '%d.%m.%Y').date()
                    if found_date <= target_date:
                        day_col = col
                        target_date = found_date
                        reason = f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ ({found_date.strftime('%d.%m.%Y')})"
                        break
    
    if day_col is None:
        return

    current_weekday_name = weekday_names[target_date.weekday()]
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã –¥–ª—è –¥–Ω—è
    pairs = []
    first_pair_time = None
    
    for row in range(1, df.shape[0]):
        time_slot = str(df.iloc[row, 1]).strip()
        if not time_slot or time_slot == 'nan' or time_slot == ' ':
            continue
            
        cell_value = str(df.iloc[row, day_col]).strip()
        if not cell_value or cell_value == 'nan' or cell_value == ' ':
            continue
            
        if first_pair_time is None:
            first_pair_time = time_slot.split('-')[0].strip()
            
        lines = cell_value.split('\n')
        subject = lines[0].strip() if lines else ""
        teacher = ""
        classroom = ""
        
        if len(lines) > 1:
            second_line = lines[1].strip()
            if "–∞—É–¥–∏—Ç–æ—Ä–∏—è" in second_line:
                parts = second_line.split("–∞—É–¥–∏—Ç–æ—Ä–∏—è")
                teacher = parts[0].strip()
                classroom = parts[1].strip() if len(parts) > 1 else ""
                if classroom and not re.match(r'^\d{3}$', classroom):
                    classroom = ""
            else:
                teacher = second_line
                
        pairs.append({
            'time': time_slot,
            'subject': subject,
            'teacher': teacher,
            'classroom': classroom
        })

    # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –¥–Ω—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    if not pairs:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–Ω—è –±–µ–∑ –ø–∞—Ä
        table_rows = ""
        for i in range(8):  # 8 —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
            table_rows += f"""
                <tr>
                    <td style="text-align: center; font-weight: 600; color: #58a6ff;">{i + 1 if i < 4 else ''}</td>
                    <td style="text-align: center; color: #8b949e;">{['08.00-09.30', '09.40-11.10', '11.20-12.50', '13.20-14.50'][i] if i < 4 else ''}</td>
                    <td colspan="5" style="text-align: center; color: #238636; font-size: 1.5em; padding: 40px;">
                        –ù–∞ {current_weekday_name}, {target_date.strftime('%d.%m.%Y')} –ø–∞—Ä –Ω–µ—Ç!
                    </td>
                </tr>
            """
    else:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–∞—Ä–∞–º–∏
        table_rows = ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ (8:00)
        has_first_pair = any(pair['time'].startswith('08.00') for pair in pairs)
        
        if has_first_pair:
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –µ—Å—Ç—å, –Ω—É–º–µ—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            for i, pair in enumerate(pairs):
                table_rows += f"""
                    <tr>
                        <td style="text-align: center; font-weight: 600; color: #58a6ff;">{i + 1}</td>
                        <td style="text-align: center; color: #8b949e;">{pair['time']}</td>
                        <td colspan="5">
                            <div style="font-weight: 600; color: #f0f6fc; margin-bottom: 8px; font-size: 1.1em;">{pair['subject']}</div>
                            {f'<div style="color: #8b949e; margin-bottom: 5px;">{pair["teacher"]}</div>' if pair['teacher'] else ''}
                            {f'<div style="color: #238636; font-weight: 600;">–ê—É–¥. {pair["classroom"]}</div>' if pair['classroom'] else ''}
                        </td>
                    </tr>
                """
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –Ω–µ—Ç, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è —Å –Ω–æ–º–µ—Ä–æ–º 1
            table_rows += f"""
                <tr>
                    <td style="text-align: center; font-weight: 600; color: #58a6ff;">1</td>
                    <td style="text-align: center; color: #8b949e;">08.00-09.30</td>
                    <td colspan="5"></td>
                </tr>
            """
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –Ω—É–º–µ—Ä—É–µ–º –Ω–∞—á–∏–Ω–∞—è —Å 2
            for i, pair in enumerate(pairs):
                table_rows += f"""
                    <tr>
                        <td style="text-align: center; font-weight: 600; color: #58a6ff;">{i + 2}</td>
                        <td style="text-align: center; color: #8b949e;">{pair['time']}</td>
                        <td colspan="5">
                            <div style="font-weight: 600; color: #f0f6fc; margin-bottom: 8px; font-size: 1.1em;">{pair['subject']}</div>
                            {f'<div style="color: #8b949e; margin-bottom: 5px;">{pair["teacher"]}</div>' if pair['teacher'] else ''}
                            {f'<div style="color: #238636; font-weight: 600;">–ê—É–¥. {pair["classroom"]}</div>' if pair['classroom'] else ''}
                        </td>
                    </tr>
                """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
        total_rows = len(pairs) + (0 if has_first_pair else 1)
        for i in range(total_rows, 8):
            table_rows += f"""
                <tr>
                    <td style="text-align: center; font-weight: 600; color: #58a6ff;">{i + 1 if i < 4 else ''}</td>
                    <td style="text-align: center; color: #8b949e;">{['08.00-09.30', '09.40-11.10', '11.20-12.50', '13.20-14.50'][i] if i < 4 else ''}</td>
                    <td colspan="5"></td>
                </tr>
            """
    
    day_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {current_weekday_name}</title>
        <style>
            body {{ 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #0d1117;
                color: #c9d1d9;
                line-height: 1.6;
            }}
            .container {{
                width: 680px;
                margin: 0 auto;
                background-color: #161b22;
                border: 1px solid #30363d;
                border-radius: 6px;
                box-shadow: 0 8px 24px rgba(1, 4, 9, 0.12);
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }}
            .time-info {{
                background-color: #1c2128;
                padding: 20px;
                text-align: center;
                color: #58a6ff;
                font-size: 1.1em;
                border-bottom: 1px solid #30363d;
            }}
            .table {{
                border-collapse: collapse;
                width: 100%;
                background-color: #161b22;
                font-size: 16px;
                margin: 0;
                flex: 1;
            }}
            .table td, .table th {{
                border: 1px solid #30363d;
                padding: 20px 16px;
                text-align: left;
                vertical-align: top;
            }}
            .table tr:nth-child(even) {{
                background-color: #1c2128;
            }}
            .table tr:nth-child(odd) {{
                background-color: #161b22;
            }}
            .table tr:first-child {{
                background-color: #1f6feb !important;
                color: #f0f6fc;
                font-weight: 600;
                font-size: 14px;
            }}
            .update-time {{
                text-align: center;
                color: #8b949e;
                font-style: italic;
                margin: 0;
                background-color: #21262d;
                border-top: 1px solid #30363d;
                font-size: 14px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="time-info">
                –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –∫: {first_pair_time}
            </div>
            <table class="table">
                <tr>
                    <td style="text-align: center; font-weight: 600;">‚Ññ</td>
                    <td style="text-align: center; font-weight: 600;">–í—Ä–µ–º—è</td>
                    <td colspan="5" style="text-align: center; font-weight: 600;">{current_weekday_name}, {target_date.strftime('%d.%m.%Y')}</td>
                </tr>
                {table_rows}
            </table>
            <div class="update-time">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª –¥–ª—è –¥–Ω—è
    with open(DAY_HTML_FILE, 'w', encoding='utf-8') as f:
        f.write(day_html)

def get_saratov_time() -> datetime:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –°–∞—Ä–∞—Ç–æ–≤–µ (UTC+4)"""
    from datetime import timezone, timedelta
    utc_now = datetime.now(timezone.utc)
    saratov_tz = timezone(timedelta(hours=4))
    return utc_now.astimezone(saratov_tz)

def get_smart_date_for_schedule() -> tuple[datetime.date, str]:
    """–£–º–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    saratov_now = get_saratov_time()
    current_time = saratov_now.time()
    
    # –ï—Å–ª–∏ —É–∂–µ –ø–æ—Å–ª–µ 18:00, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤—Ç—Ä–∞
    if current_time.hour >= 18:
        target_date = saratov_now.date() + timedelta(days=1)
        reason = "–∑–∞–≤—Ç—Ä–∞ (–ø–æ—Å–ª–µ 18:00)"
    else:
        target_date = saratov_now.date()
        reason = "—Å–µ–≥–æ–¥–Ω—è"
    
    return target_date, reason

def crop_bottom_200px(image_bytes: bytes, target_height: int) -> bytes:
    """–û–±—Ä–µ–∑–∞–µ—Ç 200px —Å–Ω–∏–∑—É —Å —Ñ–æ—Ç–æ"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤
        image = Image.open(io.BytesIO(image_bytes))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        width, height = image.size
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–Ω–∏–∑—É 200px
        cropped_image = image.crop((0, 0, width, target_height))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        cropped_image.save(output, format='PNG')
        return output.getvalue()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–µ–∑–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return image_bytes

def create_today_image() -> bytes:
    """–°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ HTML —Ñ–∞–π–ª–∞ –¥–Ω—è —Å –ø–æ–ª–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏"""
    if not os.path.exists(DAY_HTML_FILE):
        return None
    
    try:
        hti = Html2Image()
        hti.output_path = '.'
        
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome
        chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME', '')),
        ]
        
        for path in chrome_paths:
            if os.path.exists(path):
                hti.browser_executable = path
                break
        
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        with open(DAY_HTML_FILE, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        hti.screenshot(html_str=html_content, save_as='today_schedule.png', size=(680, 1040))
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        with open('today_schedule.png', 'rb') as f:
            image_bytes = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists('today_schedule.png'):
            os.remove('today_schedule.png')
        
        # –û–±—Ä–µ–∑–∞–µ–º 200px —Å–Ω–∏–∑—É (940px - 200px = 740px)
        return crop_bottom_200px(image_bytes, 740)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–Ω—è: {e}")
        return None

def create_week_image() -> bytes:
    """–°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ HTML —Ñ–∞–π–ª–∞ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–ª–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏"""
    if not os.path.exists(HTML_FILE):
        return None
    
    try:
        hti = Html2Image()
        hti.output_path = '.'
        
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome
        chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
            r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME', '')),
        ]
        
        for path in chrome_paths:
            if os.path.exists(path):
                hti.browser_executable = path
                break
        
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        with open(HTML_FILE, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        hti.screenshot(html_str=html_content, save_as='week_schedule.png', size=(1380, 1110))
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        with open('week_schedule.png', 'rb') as f:
            image_bytes = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists('week_schedule.png'):
            os.remove('week_schedule.png')
        
        # –û–±—Ä–µ–∑–∞–µ–º 50px —Å–Ω–∏–∑—É (970px - 50px = 920px)
        return crop_bottom_200px(image_bytes, 920)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –Ω–µ–¥–µ–ª–∏: {e}")
        return None

async def send_html_file(message: types.Message) -> None:
    try:
        if not os.path.exists(HTML_FILE):
            await send_or_edit_message(message.chat.id, "‚ùå HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /update", get_back_keyboard())
            return

        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        with open(HTML_FILE, 'rb') as f:
            html_content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –¥–æ–±–∞–≤–ª—è—è –¥–æ–∫—É–º–µ–Ω—Ç
        last_message = await find_last_bot_message(message.chat.id)
        if last_message:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await last_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        await bot.send_document(
            message.chat.id,
            types.BufferedInputFile(html_content, filename="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ò–°–ü-11.html"),
            caption="üìÑ HTML –≤–µ—Ä—Å–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        await send_or_edit_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", get_back_keyboard())

async def get_today_schedule(message: types.Message) -> None:
    try:
        if not os.path.exists(DAY_HTML_FILE):
            await send_or_edit_message(message.chat.id, "‚ùå HTML —Ñ–∞–π–ª –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /update", get_back_keyboard())
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ
        status_message = await send_or_edit_message(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...", get_back_keyboard())
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è html2image
        image_bytes = create_today_image()
        
        if image_bytes is None:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ", reply_markup=get_back_keyboard())
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await bot.send_photo(
            message.chat.id,
            types.BufferedInputFile(image_bytes, filename="today_schedule.png"),
            caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ò–°–ü-11 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        await send_or_edit_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", get_back_keyboard())

async def get_week_schedule(message: types.Message) -> None:
    try:
        if not os.path.exists(HTML_FILE):
            await send_or_edit_message(message.chat.id, "‚ùå HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /update", get_back_keyboard())
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ
        status_message = await send_or_edit_message(message.chat.id, "‚è≥ –°–æ–∑–¥–∞—é —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é...", get_back_keyboard())
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—è html2image
        image_bytes = create_week_image()
        
        if image_bytes is None:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ", reply_markup=get_back_keyboard())
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await bot.send_photo(
            message.chat.id,
            types.BufferedInputFile(image_bytes, filename="week_schedule.png"),
            caption="üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ò–°–ü-11 –Ω–∞ –Ω–µ–¥–µ–ª—é",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        await send_or_edit_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", get_back_keyboard())

async def main() -> None:
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())